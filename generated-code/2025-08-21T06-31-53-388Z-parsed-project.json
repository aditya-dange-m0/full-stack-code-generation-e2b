{
  "projectName": "Todo App",
  "projectDescription": "A simple Todo App with full CRUD operations using Next.js, FastAPI, and MongoDB",
  "template": "next+fastapi+mongodb",
  "code": {
    "frontend": {
      "framework": "next",
      "files": {
        "/app/page.tsx": {
          "purpose": "Main page component with CRUD operations for todos",
          "code": "\"use client\";\n\nimport { useState, useEffect } from 'react';\n\nexport default function Home() {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const fetchTodos = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(process.env.NEXT_PUBLIC_BACKEND_URL + '/api/todos');\n      if (!response.ok) throw new Error('Failed to fetch todos');\n      const data = await response.json();\n      setTodos(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addTodo = async () => {\n    if (!newTodo) return;\n    setLoading(true);\n    try {\n      const response = await fetch(process.env.NEXT_PUBLIC_BACKEND_URL + '/api/todos', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title: newTodo })\n      });\n      if (!response.ok) throw new Error('Failed to add todo');\n      setNewTodo('');\n      fetchTodos();\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteTodo = async (id) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/todos/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete todo');\n      fetchTodos();\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateTodo = async (id, done) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/todos/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ done: !done })\n      });\n      if (!response.ok) throw new Error('Failed to update todo');\n      fetchTodos();\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4\">\n      <div className=\"max-w-lg mx-auto bg-white rounded-xl shadow-lg p-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Todo List</h1>\n        {error && <p className=\"text-red-500\">{error}</p>}\n        <div className=\"mb-4\">\n          <input\n            type=\"text\"\n            value={newTodo}\n            onChange={(e) => setNewTodo(e.target.value)}\n            className=\"border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"Add a new todo\"\n          />\n          <button\n            onClick={addTodo}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mt-2\"\n            disabled={loading}\n          >\n            Add\n          </button>\n        </div>\n        <ul className=\"space-y-2\">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            todos.map((todo) => (\n              <li key={todo._id} className=\"bg-white p-4 rounded-lg shadow border flex items-center justify-between\">\n                <span className={todo.done ? 'line-through' : ''}>{todo.title}</span>\n                <div>\n                  <button onClick={() => updateTodo(todo._id, todo.done)} className=\"text-blue-500 mr-2\">{todo.done ? 'Undo' : 'Complete'}</button>\n                  <button onClick={() => deleteTodo(todo._id)} className=\"text-red-500\">Delete</button>\n                </div>\n              </li>\n            ))\n          )}\n        </ul>\n      </div>\n    </main>\n  );\n}"
        },
        "/app/layout.tsx": {
          "purpose": "Root layout component",
          "code": "import './globals.css';\n\nexport const metadata = {\n  title: 'Todo App',\n  description: 'A simple CRUD Todo App generated by AI'\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className=\"font-sans antialiased\">{children}</body>\n    </html>\n  );\n}"
        },
        "/app/globals.css": {
          "purpose": "Global styles with Tailwind CSS",
          "code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: #f7fafc;\n}"
        }
      },
      "dependencies": {
        "package.json": {
          "purpose": "Next.js package configuration",
          "code": "{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"next\": \"14.0.4\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"typescript\": \"^5\"\n  },\n  \"devDependencies\": {\n    \"tailwindcss\": \"^3.3.0\",\n    \"autoprefixer\": \"^10.4.14\",\n    \"postcss\": \"^8.4.24\"\n  }\n}"
        }
      }
    },
    "backend": {
      "framework": "fastapi",
      "files": {
        "/main.py": {
          "purpose": "FastAPI main application with CRUD endpoints for todos",
          "code": "from fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pymongo import MongoClient\nfrom bson import ObjectId\nfrom pydantic import BaseModel, Field\nfrom typing import List\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.todoapp\n\ntodo_collection = db.todos\n\nclass TodoModel(BaseModel):\n    title: str\n    done: bool = Field(default=False)\n\nclass TodoDB(TodoModel):\n    id: str\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    try:\n        client.admin.command('ping')\n        print(\"MongoDB connection successful!\")\n    except Exception as e:\n        print(f\"MongoDB connection failed: {e}\")\n\n@app.get(\"/api/todos\", response_model=List[TodoDB])\nasync def get_todos():\n    todos = list(todo_collection.find())\n    return [{\"id\": str(todo[\"_id\"]), \"title\": todo[\"title\"], \"done\": todo[\"done\"]} for todo in todos]\n\n@app.post(\"/api/todos\", response_model=TodoDB)\nasync def create_todo(todo: TodoModel):\n    result = todo_collection.insert_one(todo.dict())\n    new_todo = todo_collection.find_one({\"_id\": result.inserted_id})\n    return {\"id\": str(new_todo[\"_id\"]), \"title\": new_todo[\"title\"], \"done\": new_todo[\"done\"]}\n\n@app.put(\"/api/todos/{todo_id}\", response_model=TodoDB)\nasync def update_todo(todo_id: str, todo: TodoModel):\n    if not ObjectId.is_valid(todo_id):\n        raise HTTPException(status_code=400, detail=\"Invalid ID\")\n    result = todo_collection.update_one({\"_id\": ObjectId(todo_id)}, {\"$set\": todo.dict()})\n    if result.matched_count == 0:\n        raise HTTPException(status_code=404, detail=\"Todo not found\")\n    updated_todo = todo_collection.find_one({\"_id\": ObjectId(todo_id)})\n    return {\"id\": str(updated_todo[\"_id\"]), \"title\": updated_todo[\"title\"], \"done\": updated_todo[\"done\"]}\n\n@app.delete(\"/api/todos/{todo_id}\")\nasync def delete_todo(todo_id: str):\n    if not ObjectId.is_valid(todo_id):\n        raise HTTPException(status_code=400, detail=\"Invalid ID\")\n    result = todo_collection.delete_one({\"_id\": ObjectId(todo_id)})\n    if result.deleted_count == 0:\n        raise HTTPException(status_code=404, detail=\"Todo not found\")\n    return {\"detail\": \"Todo deleted\"}"
        }
      },
      "dependencies": {
        "requirements.txt": {
          "purpose": "Python dependencies",
          "code": "fastapi==0.104.1\nuvicorn==0.24.0\npymongo==4.6.0\npydantic==1.10.8\n"
        }
      }
    }
  },
  "projectStructure": {
    "frontend": "frontend/\n├── app/\n│   ├── layout.tsx\n│   ├── page.tsx\n│   └── globals.css\n└── package.json",
    "backend": "backend/\n├── main.py\n└── requirements.txt"
  },
  "databaseSchema": {
    "collections": [
      {
        "name": "todos",
        "purpose": "Stores todo items",
        "schema": {
          "title": "string",
          "done": "boolean"
        }
      }
    ]
  },
  "apiEndpoints": [
    {
      "method": "GET",
      "path": "/api/todos",
      "purpose": "Fetch all todos"
    },
    {
      "method": "POST",
      "path": "/api/todos",
      "purpose": "Create a new todo"
    },
    {
      "method": "PUT",
      "path": "/api/todos/{todo_id}",
      "purpose": "Update an existing todo"
    },
    {
      "method": "DELETE",
      "path": "/api/todos/{todo_id}",
      "purpose": "Delete a todo"
    }
  ]
}